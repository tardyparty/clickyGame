{"version":3,"sources":["components/navbar/index.js","components/jumbotron/index.js","components/main/index.js","components/picture/index.js","components/footer/index.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","props","className","status","score","highscore","Jumbotron","Main","children","Pictures","onClick","clickFn","picture","alt","name","src","image","Footer","href","target","App","scoreGame","console","log","clicked","setState","shuffleArray","state","pictures","gameOver","map","array","i","length","j","Math","floor","random","baseState","this","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"k0EAceA,MAXf,SAAgBC,GAEd,OACE,yBAAKC,UAAU,UACb,0CACA,4BAAKD,EAAME,QACX,sCAAYF,EAAMG,MAAlB,iBAAuCH,EAAMI,a,MCOpCC,MAbf,WACE,OACE,yBAAKJ,UAAU,yBACb,2FAGA,wE,MCFSK,MAJf,SAAcN,GACZ,OAAO,yBAAKC,UAAU,QAAQD,EAAMO,W,aCSvBC,MAVf,SAAkBR,GAChB,OACE,yBAAKC,UAAU,OAAOQ,QAAU,kBAAMT,EAAMU,QAAQV,EAAMW,WACxD,yBAAKV,UAAU,iBACb,yBAAKW,IAAKZ,EAAMa,KAAMC,IAAKd,EAAMe,W,MCO1BC,MAXf,WACE,OACE,4BAAQf,UAAU,sBAChB,4BACE,uBAAGgB,KAAK,2CAA2CC,OAAO,UAA1D,UADF,KAEE,uBAAGD,KAAK,8CAA8CC,OAAO,UAA7D,iBCmFOC,E,YAhFf,WAAYnB,GAAQ,IAAD,8BACjB,4CAAMA,KAWNoB,UAAY,SAAAT,GAEVU,QAAQC,IAAI,oBAENX,EAAQY,SAQZF,QAAQC,IAAI,mBACZ,EAAKE,SAAS,CAAEtB,OAAQ,iBACxB,EAAKuB,aAAa,EAAKC,MAAMC,UAC7B,EAAKC,aAVL,EAAKJ,SAAS,CAAErB,MAAO,EAAKuB,MAAMvB,MAAQ,IAC1CQ,EAAQY,SAAU,EAClB,EAAKE,aAAa,EAAKC,MAAMC,UAC7B,EAAKH,SAAS,CAAEtB,OAAQ,iBACxBmB,QAAQC,IAAIX,EAAQY,WArBP,EA+BjBK,SAAW,WACL,EAAKF,MAAMvB,MAAQ,EAAKuB,MAAMtB,WAChC,EAAKoB,SAAS,CAAEpB,UAAW,EAAKsB,MAAMvB,QAExC,EAAKqB,SAAS,CAAErB,MAAO,IACvB,EAAKqB,SAAS,CAAEG,SAAUA,EAASE,KAAK,SAAAlB,GAEpC,OADAA,EAAQY,SAAU,EACXZ,OAEX,EAAKc,aAAa,EAAKC,MAAMC,WAxCd,EA4CjBF,aAAe,SAAAK,GACb,IAAK,IAAIC,EAAID,EAAME,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACvC,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADH,EAEhB,CAACD,EAAMG,GAAIH,EAAMC,IAAvCD,EAAMC,GAFgC,KAE5BD,EAAMG,GAFsB,KAI3CZ,QAAQC,IAAIQ,GACZ,EAAKN,SAAS,CAAEG,SAAUG,KAhD5B,EAAKJ,MAAQ,CACXC,WACAxB,MAAO,EACPC,UAAW,EACXF,OAAQ,UAEV,EAAKmC,UAAY,EAAKX,MARL,E,sEAqDP,IAAD,OAEP,OACE,6BACE,kBAAC,EAAD,CAAQxB,OAAQoC,KAAKZ,MAAMxB,OAAQC,MAAOmC,KAAKZ,MAAMvB,MAAOC,UAAWkC,KAAKZ,MAAMtB,YAClF,yBAAKH,UAAU,aACb,kBAAC,EAAD,MACA,kBAAC,EAAD,KAEGqC,KAAKZ,MAAMC,SAASE,KAAK,SAAAlB,GAAO,OAC/B,kBAAC,EAAD,CACAA,QAASA,EACT4B,IAAK5B,EAAQE,KACbA,KAAMF,EAAQE,KACdE,MAAOJ,EAAQI,MACfQ,QAASZ,EAAQY,QACjBb,QAAS,EAAKU,iBAKpB,kBAAC,EAAD,W,GA3EUoB,aCEEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.fe09616d.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Navbar(props) {\n\n  return(\n    <nav className=\"navbar\">\n      <h1>clickyGame</h1>\n      <h1>{props.status}</h1>\n      <h1>Score: {props.score} | Highscore: {props.highscore}</h1>\n    </nav>\n  )\n}\n\nexport default Navbar","import React from \"react\";\nimport \"./style.css\";\n\nfunction Jumbotron() {\n  return(\n    <div className=\"jumbotron text-center\">\n      <p>\n        1. Score a point by clicking on an image for the first time!\n      </p>\n      <p>\n      2. Don't click on the same image twice!\n      </p>\n    </div>\n  )\n}\n\nexport default Jumbotron;","import React, { Component } from \"react\";\nimport \"./style.css\";\n\nfunction Main(props) {\n  return <div className=\"main\">{props.children}</div>;\n}\n  \nexport default Main;","import React, { Component } from \"react\";\nimport \"./style.css\";\n\nfunction Pictures(props) {\n  return (\n    <div className=\"card\" onClick={ () => props.clickFn(props.picture)}>\n      <div className=\"img-container\">\n        <img alt={props.name} src={props.image} />\n      </div>\n    </div>\n  )\n}\n\nexport default Pictures;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Footer() {\n  return (\n    <footer className=\"footer text-center\">\n      <h5>\n        <a href=\"https://github.com/tardyparty/clickyGame\" target=\"_blank\">GITHUB</a> |\n        <a href=\"https://tardyparty.github.io/finalPortfolio\" target=\"_blank\"> PORTFOLIO</a>\n      </h5>\n    </footer>\n  )\n}\n\nexport default Footer;","import React, { Component } from 'react';\nimport './App.css';\nimport Navbar from \"./components/navbar\";\nimport Jumbotron from \"./components/jumbotron\";\nimport Main from \"./components/main\";\n// import Wrapper from \"./components/wrapper\";\nimport pictures from \"./pictures.json\";\nimport Pictures from \"./components/picture\";\nimport Footer from \"./components/footer\";\n\nclass App extends Component {\nconstructor(props) {\n  super(props)\n  this.state = {\n    pictures,\n    score: 0,\n    highscore: 0,\n    status: \"Click!\"\n  }\n  this.baseState = this.state\n}\n\n\n  scoreGame = picture => {\n\n    console.log(\"scoreGame called\");\n    \n    if ( !picture.clicked ) {\n      this.setState({ score: this.state.score + 1});\n      picture.clicked = true;\n      this.shuffleArray(this.state.pictures);\n      this.setState({ status: \"Click Again!\"});\n      console.log(picture.clicked)\n    }\n    else {\n      console.log(\"gameOver called\");\n      this.setState({ status: \"Game Over :(\"})\n      this.shuffleArray(this.state.pictures)\n      this.gameOver();\n    }\n  }\n\n  gameOver = () => {\n    if (this.state.score > this.state.highscore) {\n      this.setState({ highscore: this.state.score});\n    }\n    this.setState({ score: 0});\n    this.setState({ pictures: pictures.map( picture => {\n        picture.clicked = false;\n        return picture\n    })});\n    this.shuffleArray(this.state.pictures);\n  }\n\n  // Javascript version of the Durstenfeld Shuffle Algorithm\n  shuffleArray = array => {\n    for (let i = array.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [array[i], array[j]] = [array[j], array[i]];\n    }\n    console.log(array);\n    this.setState({ pictures: array })\n  }\n\n  render() {\n\n    return (\n      <div>\n        <Navbar status={this.state.status} score={this.state.score} highscore={this.state.highscore}/>\n        <div className=\"container\">\n          <Jumbotron/>\n          <Main>\n            {/* {this.shuffleArray(pictures)} */}\n            {this.state.pictures.map( picture => (\n              <Pictures \n              picture={picture}\n              key={picture.name}\n              name={picture.name}\n              image={picture.image}\n              clicked={picture.clicked}\n              clickFn={this.scoreGame}\n              />\n            ))}\n          </Main>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}